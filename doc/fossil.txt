*fossil.txt*    Fossil plugin for vim.  Last change: 2023 Oct 25

Maintainer: Preben Guldberg <preben@guldberg.org>
License:    MIT, see |fossil-plugin-license|.

Introduction                                                          *fossil*
The plugin provides a set of vim commands for capturing the output of
fossil commands.  Captured output is generally captured in a temporary
buffer (see |:Fossil|, |:CFossil|, |:SFossil| and |:VFossil|), but can also
be inserted in the current buffer (see |:RFossil|).

Additional commands can be defined, e.g. `:Fdiff`, or `:Fstatus`, using
the |g:fossil_sub_cmds| variable.

The |FossilLookupInfo()| function can be used to lookup up information
for the word or filename under the cursor, e.g. to map |CTRL-]| to
open a new window with a timeline for a branch name.

Please see |fossil-variables| for further customisation.

For more information on fossil, see https://fossil-scm.org/.

----------------------------------------------------------------------------
Commands                                                     *fossil-commands*

:[{mods}]Fossil[!] [{arguments}]                                     *:Fossil*
        Run a fossil command and capture the output in a temporary buffer.
        If |g:fossil_new_cmd| is not set, buffer is created using ':new'.
        See |<q-mods>| for possible {mods}.

        To allow using %, |<cfile>| in {arguments}, any {arguments} that
        seem suitable for |expand()| are expanded before the temporary
        buffer is created.

        The name of the buffer is based on the fossil command being run,
        with a number prefix if buffer name collisions occur.

        When the buffer is no longer displayed in a window, the default is
        to wipe it, though this can be tuned with |g:fossil_bufhidden|.

                                                                    *:Fossil!*
        When [!] is used, the command is run as an external command and the
        output is not captured.  See |:Rfossil| for inserting the output in
        the current buffer.
                                               *b:fossil_cmd* *b:fossil_cmdline*
        After creating the temporary buffer, the full command line is saved
        as `b:fossil_cmdline` and the first argument as `b:fossil_cmd`.
        The current directory is set using |:lcd| for any future |:FRefresh|.
        The default is to use |getcwd()|, but see |g:fossil_local_root|.

:[{mods}]CFossil[!] [{arguments}]                                   *:CFossil*
        Capture version of |:Fossil|; buffer created using ':enew'.

:[{mods}]SFossil[!] [{arguments}]                                   *:SFossil*
        Split version of |:Fossil|; buffer created using ':horizontal new'.

:[{mods}]VFossil[!] [{arguments}]                                   *:VFossil*
        VSplit version of |:Fossil|; buffer created using ':vertical new'.

:[{range}]RFossil [{arguments}]                                     *:RFossil*
        Read the output of a fossil command into the current buffer after
        the last line in {range}, or the current line without {range}.

:FRefresh                                                          *:FRefresh*
        Refesh the buffers content by running |b:fossil_cmdline|, if set.

        The command is re-run in the directory that was current when the
        buffer was created (see |b:fossil_cmdline|).

        To perform an auto-refresh when swithing to a window with a temporary
        |:Fossil| buffer, if containg specific fossil output, use e.g.
>
    :let g:au_fossil_referesh = ['changes', 'extra', 'status', 'timeline']
    :au BufEnter {} if exists("b:fossil_cmd")
                 \|   if index(g:au_fossil_referesh, b:fossil_cmd) != -1
                 \|     FRefresh
                 \|   fi
                 \| endif
<
----------------------------------------------------------------------------
Tab completion                                             *fossil-completion*

The default commands completes based on the following steps:

1. The first argument completes fossil command names.
2. Arguments starting with `-` uses applicable fossil command options.
3. Other arguments completes file names using |glob()|.

Commands created based on g:fossil_sub_cmds, like |:Fdiff|, use completion
steps 2. and 3. above.

NOTE: The lists of options are auto generated from `fossil help -a -v`.
      For fossil commands with sub commands, all options for any of the
      sub commands is included.

----------------------------------------------------------------------------
Functions                                                   *fossil-functions*

                                                          *FossilLookupInfo()*
FossilLookupInfo() identifies a user name, tag/branch name, hash or existing
filename under the cursor and runs a |:Fossil| command to show the command.
The default is to check for the following

- Tag names that appear as 'tags: tagname, tag2'.
- User names that appear as 'user: name'
- Hash values of 10 or more hexadecimal characters. 
- Filenames if they exists either relative to the current directory, or
  if |g:fossil_local_root| is set, the file exists relative to local-root.

The default is to look up information using the equivalent of:

- file: :Fossil timeline -p <cfile>
- hash: :Fossil info -v <cword>
- tag:  :Fossil timeline -b <cword>
- user: :Fossil timeline -u <cword>

The <cword> is expanded before building the command line.  This is mainly
done to include `-` in branch names for tags by default, though further
customisation can be done by setting |g:fossil_iskeyword|.

Which command to execute can be fine tuned using |g:fossil_info_config|.

                                                               *fossil-CTRL-]*
To remap |CTRL-]| for buffers with a |'filetype'| of `fossil`, use e.g.
>
    :au FileType fossil nmap <buffer> <C-]> :call g:FossilLookupInfo()<CR>
<
----------------------------------------------------------------------------
Plugin variables                                            *fossil-variables*

                                                          *g:fossil_bufhidden*
If set, used for the |'bufhidden'| option for temporary buffers.

                                                                *g:fossil_cmd*
If set, use g:fossil_cmd instead of the default `fossil` to run commands.

                                                        *g:fossil_info_config*
If set, this controls which commands to run for identifiers under the
cursor with |FossilLookupInfo()|.  The variable is a nested dictionary of
commands and arguments to use for different types of identifiers, allowing
for tuning per type of fossil output captured in the current buffer.

The top level keys are 'file', 'hash', 'tag' and 'user' and the values are
dictionaries where the keys are either:

- 'default': used as the default for this type of keyword.
- cmd: used if the key is equal to |b:fossil_cmd|.
- /regexp/: used if |b:fossil_cmd| matches regexp.

The values are dictinaries with the following keys:

- 'cmd': The vim command to run, one of the |:Fossil| or |:Fossil!| commands.
         If omitted, the default is |:Fossil|.
- 'args': The fossil command line arguments to use (mandatory).

The final command line is based on the 'cmd' and 'args' values with the
keyword/filename appended.

The following example configuration
>
    let g:fossil_info_config = {
      \ 'user': { 'default': { 'cmd': 'Fossil!', 'args': 'user contact' } },
      \ 'tags': { '/^time': { 'args': 'branch ls' } },
      \ 'hash': { 'info': { 'args': 'diff --ci' } },
      \ }
<
would result in the following commands being run:

1. All information for users is run as ':Fossil! user contact <cword>'.
2. When the current buffer has `fossil timeline` information (b:fossil_cmd
   starts with `time`), run ':Fossil branch ls <cword>'.
3. All other information uses the defaults for |FossilLookupInfo()|.

                                                          *g:fossil_iskeyword*
If set, used to set |'iskeyword'| temporarily when looking up keywords
with |FossilLookupInfo()|.  If not set, use `isk&vim` plus `-` (see |:set-&vim|).
To also include e.g. `@` in user names, use e.g.
>
    :let g:fossil_iskeyword = '@,48-57,_,192-255,-,@-@'
>
See |'iskeyword'| and |'isfname'| for more information on the syntax.

                                                         *g:fossil_local_root*
If set, use `fossil info` to find the local-root for the current buffer and
compare with the local-root for the current directory:

1. If there is no local-root for the current buffer, show an error message.
2. If there is no local-root for the current directory, or if it differs
   from local-root for the current buffer, |:lcd| to the buffers local-root.
3. Otherwise, |:lcd| is set to |getcwd()| of the current buffer.

                                                            *g:fossil_new_cmd*
The value of `g:fossil_new_cmd` is used to control how |:Fossil| opens the
temporary buffer.  The default is 'new'.
>
    :let g:fossil_new_cmd = 'enew'                  " Works like :CFossil
    :let g:fossil_new_cmd = 'vertical new'          " Works like :VFossil
<
                                                         *g:fossil_short_cmds*
The plugin will create short name versions of the commands, where e.g.
>
    :let g:fossil_short_cmds = ['F', 'CF', 'RF', 'SF', 'VF', 'FR']
<
would create all of the possible short name commands:

:F      As |:Fossil|, added if "F" is in g:fossil_short_cmds        *fossil-:F*
:CF     As |:CFossil|, added if "CF" is in g:fossil_short_cmds      *fossil-:CF*
:RF     As |:RFossil|, added if "RF" is in g:fossil_short_cmds      *fossil-:RF*
:SF     As |:SFossil|, added if "SF" is in g:fossil_short_cmds      *fossil-:SF*
:VF     As |:VFossil|, added if "VF" is in g:fossil_short_cmds      *fossil-:VF*
:FR     As |:FRefresh|, added if "FR" is in g:fossil_short_cmds     *fossil-:FR*

                                                           *g:fossil_sub_cmds*
If you set `g:fossil_sub_cmds` to a list of fossil sub commands, the plugin
will create custom commands.  For instance, if you set this in your |vimrc|,
>
    :let g:fossil_sub_cmds = ["diff"]
<
the following commands are created:

:Fdiff      Equivalent to running `:Fossil diff`                       *:Fdiff*
:CFdiff     Equivalent to running `:CFossil diff`                      *:CFdiff*
:RFdiff     Equivalent to running `:RFossil diff`                      *:RFdiff*
:SFdiff     Equivalent to running `:SFossil diff`                      *:SFdiff*
:VFdiff     Equivalent to running `:VFossil diff`                      *:VFdiff*

----------------------------------------------------------------------------
Syntax highlighting                                            *fossil-syntax*

The syntax highlighting highlights output in `fossil commit` messages as well
as output of e.g. `fossil` `status`, `timeline`, `praise` and `help` commands.

----------------------------------------------------------------------------
License                                                *fossil-plugin-license*

Copyright (c) 2023 Preben Guldberg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
