*fossil.txt*    Fossil plugin for vim.  Last change: 2023 Oct 15

Maintainer: Preben Guldberg <preben@guldberg.org>
License:    MIT, see |fossil-plugin-license|.

Introduction                                                          *fossil*
The plugin provides a set of vim commands for capturing the output of
fossil commands.  Captured output is generally captured in a temporary
buffer (see |:Fossil|, |:CFossil|, |:SFossil| and |:VFossil|), but can also
be inserted in the current buffer (see |:RFossil|).

Additional commands can be defined, e.g. `:Fdiff`, or `:Fstatus`, using
the |g:fossil_sub_cmds| variable.

Please see |fossil-variables| for further customisation.

For more information on fossil, see https://fossil-scm.org/.

----------------------------------------------------------------------------
Commands                                                     *fossil-commands*

:[{mods}]Fossil[!] [{arguments}]                                     *:Fossil*
        Run a fossil command and capture the output in a temporary buffer.
        If |g:fossil_new_cmd| is not set, buffer is created using ':new'.
        See |<q-mods>| for possible {mods}.

        To allow using %, |<cfile>| in {arguments}, any {arguments} that
        seem suitable for |expand()| are expanded before the temporary
        buffer is created.

        The name of the buffer is based on the fossil command being run,
        with a number prefix if buffer name collisions occur.

        When the buffer is no longer displayed in a window, the default is
        to wipe it, though this can be tuned with |g:fossil_bufhidden|.

        When [!] is used, the command is run as an external command and the
        output is not captured.  See |:Rfossil| for inserting the output in
        the current buffer.
                                               *b:fossil_cmdline* *b:fossil_cmd*
        After creating the temporary buffer, the full command line is saved
        as `b:fossil_cmdline` and the first argument as `b:fossil_cmd`.
        The current directory is set using |:lcd| for any future |:FRefresh|.
        The default is to use |getcwd()|, but see |g:fossil_altroot|.

:[{mods}]CFossil[!] [{arguments}]                                   *:CFossil*
        Capture version of |:Fossil|; buffer created using ':enew'.

:[{mods}]SFossil[!] [{arguments}]                                   *:SFossil*
        Split version of |:Fossil|; buffer created using ':horizontal new'.

:[{mods}]VFossil[!] [{arguments}]                                   *:VFossil*
        VSplit version of |:Fossil|; buffer created using ':vertical new'.

:[{range}]RFossil [{arguments}]                                     *:RFossil*
        Read the output of a fossil command into the current buffer after
        the last line in {range}, or the current line without {range}.

:FRefresh                                                          *:FRefresh*
        Refesh the buffers content by running |b:fossil_cmdline|, if set.

        The command is re-run in the directory that was current when the
        buffer was created (see |b:fossil_cmdline|).

        To perform an auto-refresh when swithing to a window with a temporary
        |:Fossil| buffer, if containg specific fossil output, use e.g.
>
    :let g:au_fossil_referesh = ['changes', 'extra', 'status', 'timeline']
    :au BufEnter {} if exists("b:fossil_cmd")
                 \|   if index(g:au_fossil_referesh, b:fossil_cmd) != -1
                 \|     FRefresh
                 \|   fi
                 \| endif
<
----------------------------------------------------------------------------
Tab completion                                             *fossil-completion*

The default commands completes based on the following steps:

1. The first argument completes fossil command names.
2. Arguments starting with `-` uses applicable fossil command options.
3. Other arguments completes file names using |glob()|.

Commands created based on g:fossil_sub_cmds, like |:Fdiff|, use completion
steps 2. and 3. above.

NOTE: The lists of options are auto generated from `fossil help -a -v`.
      For fossil commands with sub commands, all options for any of the
      sub commands is included.

----------------------------------------------------------------------------
Plugin variables                                            *fossil-variables*

                                                            *g:fossil_altroot*
If set, use `fossil info` to find the local-root for the current buffer and
compare with the local-root for the current directory:

1. If there is no local-root for the current buffer, show an error message.
2. If there is no local-root for the current directory, or if it differs
   from local-root for the current buffer, |:lcd| to the buffers local-root.
3. Otherwise, |:lcd| is set to |getcwd()| of the current buffer.

                                                          *g:fossil_bufhidden*
If set, used for the |'bufhidden'| option for temporary buffers.

                                                                *g:fossil_cmd*
If set, use g:fossil_cmd instead of the default `fossil` to run commands.

                                                              *g:fossil_new_cmd*
The value of `g:fossil_new_cmd` is used to control how |:Fossil| opens the
temporary buffer.  The default is 'new'.
>
    :let g:fossil_new_cmd = 'enew'                  " Works like :CFossil
    :let g:fossil_new_cmd = 'vertical new'          " Works like :VFossil
<
                                                         *g:fossil_short_cmds*
The plugin will create short name versions of the commands, where e.g.
>
    :let g:fossil_short_cmds = ['F', 'CF', 'RF', 'SF', 'VF', 'FR']
<
would create all of the possible short name commands:

:F      As |:Fossil|, added if "F" is in g:fossil_short_cmds        *fossil-:F*
:CF     As |:CFossil|, added if "CF" is in g:fossil_short_cmds      *fossil-:CF*
:RF     As |:RFossil|, added if "RF" is in g:fossil_short_cmds      *fossil-:RF*
:SF     As |:SFossil|, added if "SF" is in g:fossil_short_cmds      *fossil-:SF*
:VF     As |:VFossil|, added if "VF" is in g:fossil_short_cmds      *fossil-:VF*
:FR     As |:FRefresh|, added if "FR" is in g:fossil_short_cmds     *fossil-:FR*

                                                           *g:fossil_sub_cmds*
If you set `g:fossil_sub_cmds` to a list of fossil sub commands, the plugin
will create custom commands.  For instance, if you set this in your |vimrc|,
>
    :let g:fossil_sub_cmds = ["diff"]
<
the following commands are created:

:Fdiff      Equivalent to running `:Fossil diff`                       *:Fdiff*
:CFdiff     Equivalent to running `:CFossil diff`                      *:CFdiff*
:RFdiff     Equivalent to running `:RFossil diff`                      *:RFdiff*
:SFdiff     Equivalent to running `:SFossil diff`                      *:SFdiff*
:VFdiff     Equivalent to running `:VFossil diff`                      *:VFdiff*

----------------------------------------------------------------------------
Syntax highlighting                                            *fossil-syntax*

The syntax highlighting highlights output in `fossil commit` messages as well
as output of e.g. `fossil` `status`, `timeline`, `praise` and `help` commands.

----------------------------------------------------------------------------
License                                                *fossil-plugin-license*

Copyright (c) 2023 Preben Guldberg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
